BLOG IMPLEMENTATION GUIDE FOR CURATED CLEANINGS WEBSITE

Based on your existing Next.js 15 architecture, here are the best approaches to add a blog:

=== OPTION 1: NEXT.JS APP ROUTER APPROACH (RECOMMENDED) ===

File Structure:
/src/app/blog/
├── page.tsx (blog listing page)
├── [slug]/
│   └── page.tsx (individual blog post)
└── layout.tsx (blog-specific layout)

/content/blog/
├── post-1.md (markdown files for posts)
├── post-2.md
└── index.json (metadata index)

Implementation Steps:
1. Create blog directory structure in /src/app/blog/
2. Add markdown processing (install: gray-matter, remark, remark-html)
3. Create dynamic route for individual posts using [slug]
4. Build blog listing page with pagination
5. Add RSS feed generation (/src/app/feed.xml/route.ts)
6. Update sitemap.ts to include blog posts
7. Add blog navigation to main layout

SEO Benefits:
- Automatic sitemap inclusion
- Server-side rendering for better SEO
- Clean URLs (/blog/post-title)
- Integrates with existing local SEO strategy

=== OPTION 2: HEADLESS CMS INTEGRATION ===

Recommended Services:
- Contentful (user-friendly, good free tier)
- Sanity (developer-friendly, real-time)
- Strapi (self-hosted option)

Implementation:
1. Set up CMS account and content model
2. Install CMS SDK (e.g., @contentful/rich-text-react-renderer)
3. Create API routes for fetching content
4. Build blog components that consume CMS data
5. Set up webhooks for content updates

Benefits:
- Non-technical content management
- Rich media support
- Content scheduling
- Multi-author support

=== PREMIUM MDX BLOG PRD (RECOMMENDED) ===

PRODUCT REQUIREMENTS DOCUMENT: VISUALLY STUNNING MDX BLOG

== VISION ==
Create a beautiful, streamlined blog inspired by Design Milk's clean aesthetic and systematic approach. Focus on consistent formatting, beautiful typography, and an effortless daily publishing workflow. Each post follows Design Milk's exact structure: thumbnail for listing pages, large title at top of individual posts, author and date below title, hero image directly under metadata, then article content - ensuring visual consistency and easy content creation.

== CORE FEATURES ==

1. STANDARDIZED POST STRUCTURE (Design Milk Inspired)
   - Thumbnail image for blog listing pages
   - Large title display at top of individual posts
   - Subtitle for additional context
   - Author byline and publication date
   - Hero image positioned directly under title/meta
   - Clean article content flow beneath hero image
   - Consistent spacing and layout across all posts

2. ENHANCED TYPOGRAPHY & LAYOUT
   - Beautiful, readable font hierarchy
   - Generous white space for breathing room
   - Consistent vertical rhythm
   - Clean heading styles with proper contrast
   - Optimized line height for comfortable reading
   - Mobile-responsive typography scaling

3. STREAMLINED CONTENT MANAGEMENT
   - Simple MDX frontmatter structure for consistent metadata
   - Automated thumbnail and hero image handling
   - Standardized author and date formatting
   - Easy daily publishing workflow

== TECHNICAL ARCHITECTURE ==

File Structure:
/src/app/blog/
├── page.tsx (clean grid layout with cards)
├── [slug]/
│   └── page.tsx (beautiful reading experience)
└── components/
    ├── MDXComponents.tsx (custom component library)
    ├── ReadingProgress.tsx
    └── BlogLayout.tsx

/content/blog/
├── posts/
│   ├── spring-cleaning-guide.mdx
│   ├── holiday-prep-checklist.mdx
│   └── deep-clean-secrets.mdx
├── authors/
│   └── team-profiles.json
└── categories/
    └── metadata.json

Dependencies to Install:
- @next/mdx
- @mdx-js/loader
- @mdx-js/react
- remark-gfm (GitHub Flavored Markdown)
- rehype-slug (heading anchors)
- reading-time (reading time estimates)

== MDX POST STRUCTURE ==

Frontmatter Template:
---
title: "Article Title"
subtitle: "Brief subtitle or description"
author: "Author Name"
date: "2024-01-15"
thumbnail: "/images/blog/post-thumbnail.jpg"
heroImage: "/images/blog/post-hero.jpg"
category: "cleaning-tips"
---

Article content begins here...

== CUSTOM MDX COMPONENTS ==

<QuoteBlock author="">Quote content</QuoteBlock>
<Callout type="tip">Important information</Callout>
<ImageWithCaption src="" caption="" />

== DESIGN SYSTEM ==

Color Palette:
- Primary: Clean blues and whites from existing brand
- Accent: Warm gold for highlights and CTAs
- Supporting: Soft greens for tips, warm grays for text
- Status: Success green, warning amber, info blue

Typography:
- Headlines: Inter or Poppins (modern, clean)
- Body: Source Sans Pro (readable, professional)
- Accents: Playfair Display (elegant quotes/callouts)

Layout Principles:
- Generous white space for breathing room
- Consistent vertical rhythm
- Mobile-first responsive design
- Accessibility-first approach (AA compliance)

== DAILY PUBLISHING WORKFLOW ==

1. CREATE NEW POST
   - Copy frontmatter template to new .mdx file
   - Name file: YYYY-MM-DD-post-slug.mdx
   - Add thumbnail image (600x400px recommended)
   - Add hero image (1200x600px recommended)
   - Fill in title, subtitle, author, date

2. WRITE CONTENT
   - Focus on clean, readable prose
   - Use standard markdown formatting
   - Add custom components sparingly
   - Maintain consistent voice and style

3. PUBLISH
   - Save file to /content/blog/posts/
   - Automatic sitemap generation
   - Automatic blog listing update
   - SEO optimization built-in

== CONTENT CATEGORIES ==

1. CLEANING TIPS & GUIDES
2. SEASONAL CLEANING
3. BEHIND-THE-SCENES
4. LOCAL COMMUNITY
5. COMPANY NEWS

== PERFORMANCE GOALS ==

- Lighthouse Performance: 95+
- First Contentful Paint: <1.5s
- Largest Contentful Paint: <2.0s
- Cumulative Layout Shift: <0.1
- Time to Interactive: <3.0s

== SEO ENHANCEMENTS ==

- Article schema markup
- Social media card optimization
- Clean URL structure
- Proper heading hierarchy
- Internal linking to service pages

== PHASE 1 IMPLEMENTATION ==

1. Set up MDX infrastructure with Next.js App Router
2. Create blog listing page with thumbnail grid (Design Milk style)
3. Build individual post layout with large title, meta, hero image
4. Implement frontmatter parsing for consistent post structure
5. Design beautiful typography system for article content
6. Create 3 sample posts following the standardized format
7. Optimize for daily publishing workflow

== PAGE LAYOUTS ==

BLOG LISTING (/blog):
- Grid of post cards with thumbnails
- Title and subtitle on each card
- Author and date metadata
- Clean, minimal design with hover effects

INDIVIDUAL POST (/blog/[slug]):
- Large title at top
- Author and date below title
- Hero image directly under metadata
- Article content with beautiful typography
- Consistent spacing throughout

== SUCCESS METRICS ==

- Consistent visual appearance across all posts
- Easy daily publishing (under 10 minutes per post)
- Beautiful, professional design that builds trust
- Fast loading and mobile-responsive
- Streamlined content creation workflow

This Design Milk-inspired blog system will enable effortless daily publishing while maintaining a premium, consistent brand appearance.